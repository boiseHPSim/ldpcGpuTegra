LDPC on Tegra GPU

Literature survey:


"A High Throughput Efficient Approach for Decoding LDPC Codes onto GPU Devices"   \cite{art_gpu_0}

GD :
- Decoding process is applied on frames with hundreds up to thousands of lenghts. The length, the irregularity and the huge computation make the decoding
process difficult to implement.
- Many recent works have focused on  mapping LDPC decoders on GPU devices. Work objectives were to achive high or real-time decoding throughput for different kinds of LDPC codes(short or long frame length, regular, or irregular codes,etc).

Work : 
- It has fitted layered-schedule flooding-based algorithm on GPU devices and has gain better performances relative to similar works.
- It has used interleaving/de-interleaving to manage faster memory access on GPU and lower the cost of it
----------------------------------------------------------------------------------------------
"High-Throughput LDPC Decoder on Low-Power Embedded Processors" \cite{art_neon}

They have used horizontal layered-based decoding that is based on parallel decoding of a low set of frames that allows reaching high throughput while maintaining low-latency. They have used ARM Processors's SIMD and SIMT programming models to implement their algorithm. 


----------------------------------------------------------------------------------------------
"A reduced complexity decoder architecture via layered decoding of LDPC codes" \cite{art_layered0}

Good : layered Decoding allows updated imformation to be utilized more quickly in the algorithm thus speeding up the decoding\cite{art_layered0}.

work:
They have applied a form a layered belief propogation to irregular LDPC codes to reach 2x faster convergence in a given error rate.By using this methos they have reduced memory bits usage by 45-50%.

----------------------------------------------------------------------------------------------

"GPU-like on-chip system for decoding LDPC codes" \cite{art_layered1}

Good :
The goal is to replace time-consuming simulations based on abstract models of the system with real-time experiments under real-world conditions. GPU-Like architecture is a promising approach to fully exploit the potential of FPGA-based acceleration platforms \cite{art_layered1}. 

work:
They proposed a GPU-based decoder that enables validating the LDPC codes at very low BER values.

----------------------------------------------------------------------------------------------

"High Throughput Low Latency LDPC Decoding on GPU for SDR Systems" \cite{art_optimize_0}

work : 
This paper has tried to access high throughput low latency decoding through optimization techniques such as : algorithm optimization, full coalesced memory access, asynchronous data transfer and multi-stream concurrent kernel execution. The implemented decoer achieves 316Mbps at 0.207 ms to 1.266 ms.

Good : 
the Memory access optimization and asynchronous memory transfer part figures are good.

----------------------------------------------------------------------------------------------

"Portable LDPC Decoding on Multicores Using OpenCL" \cite{art_ldpc_OpenCl}


----------------------------------------------------------------------------------------------

"Parallel LDPC decoder implementation on GPU based on unbalanced memory coalescing" \cite{art_memory_coalesced}

----------------------------------------------------------------------------------------------
"Massively LDPC Decoding on Multicore Architectures" \cite{art_massively}

Good :

%Multi core CPU
- The integration of multiple cores into a single chip has
become the new trend to increase processor performance.
Multicore architectures [10] have evolved from dual- or
quad-core to many-core systems, supporting multithread-
ing, a powerful technique to hide memory latency, while at
the same time provide larger Single Instruction Multiple
Data (SIMD) units for vector processing. The general-
purpose multicore processors replicate a single core in a
homogeneous way, typically with a x86 instruction set, and
provide shared memory hardware mechanisms. They
support multithreading and share data at a certain level
of the memory hierarchy, and can be programmed at a high
level by using different software technologies [11]. OpenMP
[12] provides an effective and relatively straightforward
approach for programming general-purpose multicores and
was selected under the context of this work.

% GPUs
- Mainly due to the demands for visualization technology in
the games industry, the performance of graphics processing
units (GPUs) has undergone increasing performances over
the last decade. With many cores driven by a considerable
memory bandwidth, recent GPUs are targeted for computa-
tionally intensive, multithreaded, highly parallel computa-
tion, and researchers in high-performance computing fields
are applying GPUs to general-purpose applications (GPGPU)
[13], [14], [15], [16]. However, to apply GPUs to general-
purpose applications, we need to manage very detailed code
to control the GPU’s hardware. To hide this complexity from
the programmer, several programming interface tools [17],
such as the Compute Unified Device Architecture (CUDA)
from NVIDIA [18], or the Close to the Metal (CTM) interface
(replaced by the ATI Stream SDK) from AMD/ATI [19], or
even the Caravela platform [20], have been developed. CUDA
provides a new hardware and software architecture for
managing computations on NVIDIA Tesla series’ GPUs, and
was selected as the programming interface in the work
reported in this paper.

Good TABLE :

TABLE 1 "Number of Arithmetic and Memory Access Operations per Iteration for the SPA"

----------------------------------------------------------------------------------------------

"Parallel LDPC decoding using CUDA and OpenMP"  \cite{art_cuda_openmp}

Good :

- Furthermore, iterative LDPC decoding schemes based on the sum-product algorithm (SPA) can fully be
parallelized, leading to high-speed decoding \cite{art_shannon}. For these reasons, LDPC coding is widely regarded as a very attractive coding technique for high-speed 4G wireless communications.

- However, it is very challenging to design decoder hardware that supports various standards and multiple data rates.
- Most practical LDPC decoders use soft-decisions, because soft-decision decoders typically outperform hard-decision ones.
- times. Typically, there are two ways to deliver messages in LDPC decoding. One is to use probabilities, and the
other is to use log-likelihood ratios (LLRs). In general, using LLRs is favored since that allows us to replace
expensive multiplication operations with inexpensive addition operations.



----------------------------------------------------------------------------------------------

"On the design of low-density parity-check codes within 0.0045 dB of the Shannon limit" \cite{art_shannon}


----------------------------------------------------------------------------------------------

"Performance Evaluation of LDPC Decoding on a General Purpose Mobile CPU" \cite{art_ldpc_cpu0}

----------------------------------------------------------------------------------------------

"Efficient GPU and CPU-based LDPC decoders for long codewords" \cite{art_cpu_gpu}

----------------------------------------------------------------------------------------------
"High-throughput multi-core LDPC decoders based on x86 processor" \cite{art_ldpc_cpu1}

Good : 
However, the drawback of high correcting efficiency comes from
its decoding computation complexity. However, in recent years, many researchers have proposed some be
implemented of LDPC decoders in software on multicore or many-core devices to meet for instance, Software
Defined Radio flexibility requirements.

----------------------------------------------------------------------------------------------

"My Intorduction"

% LDPC , Usages, Complexity
Originally proposed by Robert Gallager in 1962 \cite{art_gallager} and rediscovered by MacKay and Neal in 1996 \cite{art_macKay} Low Density Parity Check (LDPC) codes have been adopted by a wide range of applications including many communication system standards such as WiFi(IEEE 802.11n), 10 Gbit Ethernet (IEEE 802.3an), WiMAX (IEEE 802.16e), and DVB-S2. Recently, Chung and Richardson \cite{art_shannon} showed that the LDPC code can approach the Shannon limit to within 0.0045 dB. However, the drawback of high correcting efficiency comes from its decoding computation complexity \cite{art_ldpc_cpu1} and to date there exist no known mathematical tools to accurately evaluate their performance. Thus, a resort is typically made to simulations using computers or dedicated hardware \cite{art_memory_coalesced}.

% Initial implementation
LDPC decoding algorithms are compute-intensive and need powerful computer architecture to convey low latency and high decoding rate which caused to be initially implemented using application-specific integrated circuits(ASIC) and field-programmable gate array(FPGA) circuits \cite{art_ldpc_OpenCl_1}. However, their high speed often comes at a price of high developement cost and low programming flexibility \cite{art_convolutional} and it is very challenging to design decoder hardware that supports various standards and multiple data rates \cite{art_like_cuda_openmp}. On the other hand, iterative LDPC decoding schemes based on the sum-product algorithm (SPA) can fully be parallelized, leading to high-speed decoding \cite{art_shannon}. For these reasons, designers have recently focused on software implementations of LDPC decoders on multi/many-core devicdes \cite{art_massively} to achieve requirements through Software Defined Radio (SDR) Systems.

% Availabe multi-core architectures
As in terms of multicore architectures, researchers have used CPUs \cite{art_cpu_gpu, art_ldpc_cpu0}, GPUs \cite{art_memory_coalesced, art_massively, art_optimize_0}and ARM \cite{art_ldpc_cpu0, art_neon} architectures to develop high throughput, low latency SDR systems. 

%CPUs
In microarchitectures, increasing clock frequencies to obtain peorformance has reached a limit, so to hold this increase, other techniques based on parallel processing is being investigated \cite{art_ldpc_cpu1}. Todays' multicore architectures support SIMD (Single Instruction Multiple Data), SPMD(Single Programm Multiple Data) and SIMT(Single Instruction Multiple Threads). The general purpose multicore processors replicate a single core in a homogeneous way, typically with a x86 instruction set, and provide shared memory hardware mechanisms\cite{art_massively}. They can be programmed at a high level by using different software technologies \cite{art_multicore_techs}. OpenMP \cite{art_openMp_book} provides an effective and relatively straightforward approach for programming general-purpose multicores. On the other hand newer microarchitectures are trying to provide larger SIMD units for vector processing like SSE, AVX and AVX2 \cite{art_intel_sse} on Intel Architectures. In \cite{art_ldpc_cpu1}, the authors have used Intel SSE/AVX2 SIMD Units to effieciently implement a high throughput LDPC decoder. In \cite{art_cuda_openmp}, OpenMp is used to generate address patterns with parity check H-matrix.

%GPUs
Mainly due to the demands for visualization technology in the games industry, the performance of graphics processing units (GPUs) has undergone increasing performances over the last decade. With many cores driven by a considerable memory bandwidth, recent GPUs are targeted for computationally intensive, multithreaded, highly parallel computation, and researchers in high-performance computing fields are applying GPUs to general-purpose applications (GPGPU) \cite{art_gpu_0,art_cuda_openmp, art_memory_coalesced, art_ldpc_OpenCl, art_optimize_0, art_layered1}. They have used Compute Unified Device Architecture (CUDA)
from NVIDIA \cite{website_cuda} and Open Computing Language (OpenCL) platforms to develop LDPC Decoders.

%ARMs and NEON
Due to large computing capacity of multicore devices, software LDPC decoders have met the required throughputs of communication standards, although power consumption of x86 and GPU devices is incompatible with most of the embedded systems \cite{art_neon}. To solve this issue, ARM-based SDR systems have been prposed in recent years \cite{art_neon, art_ldpc_cpu0, art_ldpc_OpenCl_1} with goal of a SDR LDPC decoder that provides high through, low latency on a low-power embedded system. The authors in \cite{art_neon} have used ARM Processors's NEON SIMD and SIMT programming models to implement to implement a horizontal layered-based decoder that is based on parallel decoding of a low set of frames. This approach allows reaching high throughput while maintaining low-latency. Due to restrictions in an embedded system, using all resources of the system is a crucial task. Recent works in SDR LDPC embedded systems are missing the fact that todays mobile devices have powerful CUDA enabled GPUs. This paper has prposed a new algorithm that exploits ARM NEON SIMD Units and GPU together to reach a high throughput, low latency LDCP decoder. The main specification of the algorithm is that is devides processing task between system's resources. 




Wireless Communication is going to need more complex algorithms every day. On the other hand, mobile processors should be able to support these algorithms
with satisfying quality. One of the major buttlenecks in wireless communication is the decoding process whoch consumes considerable power on a mobile device[citation needed]. "LDPC decoding which is used in DVB-S2 mostly" (not sure how to say it), can be done in parallel and there has been studies on how to achieve high hroughput through efficient approches to implement ldpc decoding in parallel. On the other hand a considerable portion of these works have tried to use gpu devices which has shown results comparable to implementation on FPGAs. However, many highr throughput performances were obtained for costly GPU devices syck as "...". This makes those good for simulation but not applicable to mobile devices with low profile GPUs. This paper tries to achieve a high throughput implementation of an LDPC decoder on a mobile GPU.

The belief propogation algorithm is typically used for decoding LDPC codes \cite{art_belief_0,art_belief_1} but there are also many variations and approximations that have been studied.

% Decoding Algorithms

% Reducing Complexity of Decoding Algorithm

%CPU Based Algorithms and SSE and OpenMP

\cite{art_cpu_gpu, art_ldpc_cpu0}
%GPU Based Algorithms, implementation with CUDA and OpenCL
\cite{art_ldpc_OpenCl, art_ldpc_OpenCl_1}

% Memory Access management in GPU Algorithms
\cite{art_memory_coalesced, art_massively, art_optimize_0}
% Mobile device Algorithms

% ARM Algorithms and NEON

\cite{art_ldpc_cpu0, art_neon}


----------------------------------------------------------------------------------------------

Abstract:

Low Density Parity Check(LDPC) code is an efficient way of communication and is beeing largely used in mobile communication. With the wide usage and having computational intensivity of LDPC decoders, there has been a lot of effort to reduce decoder's complexity through algorithm optimization and parallel implementation. Recent improvements in mobile processors's architectures has made it exclusively reachable to have a real-time decoder based on a software solution. Knowing this capability, low profile GPU based decoders has been introduced that are capable of reaching high throughput by low latency. On the other hand recently there has been some work that has used ARM SIMD and SIMT programming models instead of GPU that promises satisfying quality. What this works miss is that a mobile processor that is used in a smart phone should support a lot of task and we can not allocate all resources to decoding prcesses. In this paper we propose a heterogeneous LDPC decoder that uses both ARM and GPU Processors of a mobile device to reach real-time effieciency. The different stages of decoder processes has been allocated to ARM and GPU based on an optimization solution. 

----------------------------------------------------------------------------------------------


LDPC Codes and their decoding processes:

Many works as in \cite{art_massively, art_ldpc_cpu0,art_ldpc_OpenCl_1,art_gpu_0} focused on mapping LDPC decoders on multicore architectures. Most of these works are based on the standard Two-Phase Message Passing (TPMP) schedule described in \cite{art_massively}. This algorithm works in two phases. In the first phase, all the variable nodes send messages to their neighboring parity check nodes, and in the second phase the parity check nodes send messages to their neighboring variable nodes. Due to transcendental operations and relying of Sum-Product algorithm to the estimation of noise standard deviation, in practice Min-Sum (MS) variants are prefered by designers \cite{art_neon}. More efficient layered schedules, such horizontal layered-based decoding algorithm, allow updated imformation to be utilized more quickly in the algorithm thus speeding up the decoding\cite{art_layered0, art_layered1}. In fact, the parity check matrix can be viewed as a layered graph decoded sequentially. Thw work in \cite{art_gpu_0} has applied a form of layered belief propogation to irregular LDPC codes to reach 2x faster convergence in a given error rate.By using this methos they have reduced memory bits usage by 45-50%. The major limitation of layered algorithm is its irregular memory access although it is composed of a single loop kernel composed to two sequential kernels in standard algorithms. To solve the irregular memory access a data interleaving/deinterleaving process is bein used before and after the decoding process \cite{art_gpu_0, art_neon}.

In this paper the interleaving/deinterleaving process is done ny using ARM Vector processing units and frame decoding is being done in GPU of a mobile device.



Good : layered Decoding allows updated imformation to be utilized more quickly in the algorithm thus speeding up the decoding\cite{art_layered0}.

work:
They have applied a form a layered belief propogation to irregular LDPC codes to reach 2x faster convergence in a given error rate.By using this methos they have reduced memory bits usage by 45-50%.


----------------------------------------------------------------------------------------------


Parallel processing of frames :


The porposed LDPC decoder is implemented on Jetson K1 SoCs which contains 4 Cortex-A15 processors. Each core includes a NEON SIMD unit. To achieve high throughput performance on such low-power embedded processors, the following programming model is exploited in the proposed LDPC decoder.































